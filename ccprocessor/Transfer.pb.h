// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Transfer.proto

#ifndef PROTOBUF_Transfer_2eproto__INCLUDED
#define PROTOBUF_Transfer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Transfer_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTransferImpl();
void InitDefaultsTransfer();
inline void InitDefaults() {
  InitDefaultsTransfer();
}
}  // namespace protobuf_Transfer_2eproto
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;

// ===================================================================

class Transfer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Transfer) */ {
 public:
  Transfer();
  virtual ~Transfer();

  Transfer(const Transfer& from);

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Transfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Transfer* other);
  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const PROTOBUF_FINAL { return New(NULL); }

  Transfer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Transfer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string blockchain = 1;
  void clear_blockchain();
  static const int kBlockchainFieldNumber = 1;
  const ::std::string& blockchain() const;
  void set_blockchain(const ::std::string& value);
  #if LANG_CXX11
  void set_blockchain(::std::string&& value);
  #endif
  void set_blockchain(const char* value);
  void set_blockchain(const char* value, size_t size);
  ::std::string* mutable_blockchain();
  ::std::string* release_blockchain();
  void set_allocated_blockchain(::std::string* blockchain);

  // string src_address = 2;
  void clear_src_address();
  static const int kSrcAddressFieldNumber = 2;
  const ::std::string& src_address() const;
  void set_src_address(const ::std::string& value);
  #if LANG_CXX11
  void set_src_address(::std::string&& value);
  #endif
  void set_src_address(const char* value);
  void set_src_address(const char* value, size_t size);
  ::std::string* mutable_src_address();
  ::std::string* release_src_address();
  void set_allocated_src_address(::std::string* src_address);

  // string dst_address = 3;
  void clear_dst_address();
  static const int kDstAddressFieldNumber = 3;
  const ::std::string& dst_address() const;
  void set_dst_address(const ::std::string& value);
  #if LANG_CXX11
  void set_dst_address(::std::string&& value);
  #endif
  void set_dst_address(const char* value);
  void set_dst_address(const char* value, size_t size);
  ::std::string* mutable_dst_address();
  ::std::string* release_dst_address();
  void set_allocated_dst_address(::std::string* dst_address);

  // string order = 4;
  void clear_order();
  static const int kOrderFieldNumber = 4;
  const ::std::string& order() const;
  void set_order(const ::std::string& value);
  #if LANG_CXX11
  void set_order(::std::string&& value);
  #endif
  void set_order(const char* value);
  void set_order(const char* value, size_t size);
  ::std::string* mutable_order();
  ::std::string* release_order();
  void set_allocated_order(::std::string* order);

  // string amount = 5;
  void clear_amount();
  static const int kAmountFieldNumber = 5;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // string tx = 6;
  void clear_tx();
  static const int kTxFieldNumber = 6;
  const ::std::string& tx() const;
  void set_tx(const ::std::string& value);
  #if LANG_CXX11
  void set_tx(::std::string&& value);
  #endif
  void set_tx(const char* value);
  void set_tx(const char* value, size_t size);
  ::std::string* mutable_tx();
  ::std::string* release_tx();
  void set_allocated_tx(::std::string* tx);

  // string block = 7;
  void clear_block();
  static const int kBlockFieldNumber = 7;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const char* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // string sighash = 9;
  void clear_sighash();
  static const int kSighashFieldNumber = 9;
  const ::std::string& sighash() const;
  void set_sighash(const ::std::string& value);
  #if LANG_CXX11
  void set_sighash(::std::string&& value);
  #endif
  void set_sighash(const char* value);
  void set_sighash(const char* value, size_t size);
  ::std::string* mutable_sighash();
  ::std::string* release_sighash();
  void set_allocated_sighash(::std::string* sighash);

  // bool processed = 8;
  void clear_processed();
  static const int kProcessedFieldNumber = 8;
  bool processed() const;
  void set_processed(bool value);

  // @@protoc_insertion_point(class_scope:Transfer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr blockchain_;
  ::google::protobuf::internal::ArenaStringPtr src_address_;
  ::google::protobuf::internal::ArenaStringPtr dst_address_;
  ::google::protobuf::internal::ArenaStringPtr order_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr tx_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  ::google::protobuf::internal::ArenaStringPtr sighash_;
  bool processed_;
  mutable int _cached_size_;
  friend struct ::protobuf_Transfer_2eproto::TableStruct;
  friend void ::protobuf_Transfer_2eproto::InitDefaultsTransferImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// string blockchain = 1;
inline void Transfer::clear_blockchain() {
  blockchain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::blockchain() const {
  // @@protoc_insertion_point(field_get:Transfer.blockchain)
  return blockchain_.GetNoArena();
}
inline void Transfer::set_blockchain(const ::std::string& value) {
  
  blockchain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.blockchain)
}
#if LANG_CXX11
inline void Transfer::set_blockchain(::std::string&& value) {
  
  blockchain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.blockchain)
}
#endif
inline void Transfer::set_blockchain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockchain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.blockchain)
}
inline void Transfer::set_blockchain(const char* value, size_t size) {
  
  blockchain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.blockchain)
}
inline ::std::string* Transfer::mutable_blockchain() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.blockchain)
  return blockchain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_blockchain() {
  // @@protoc_insertion_point(field_release:Transfer.blockchain)
  
  return blockchain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_blockchain(::std::string* blockchain) {
  if (blockchain != NULL) {
    
  } else {
    
  }
  blockchain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockchain);
  // @@protoc_insertion_point(field_set_allocated:Transfer.blockchain)
}

// string src_address = 2;
inline void Transfer::clear_src_address() {
  src_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::src_address() const {
  // @@protoc_insertion_point(field_get:Transfer.src_address)
  return src_address_.GetNoArena();
}
inline void Transfer::set_src_address(const ::std::string& value) {
  
  src_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.src_address)
}
#if LANG_CXX11
inline void Transfer::set_src_address(::std::string&& value) {
  
  src_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.src_address)
}
#endif
inline void Transfer::set_src_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  src_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.src_address)
}
inline void Transfer::set_src_address(const char* value, size_t size) {
  
  src_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.src_address)
}
inline ::std::string* Transfer::mutable_src_address() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.src_address)
  return src_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_src_address() {
  // @@protoc_insertion_point(field_release:Transfer.src_address)
  
  return src_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_src_address(::std::string* src_address) {
  if (src_address != NULL) {
    
  } else {
    
  }
  src_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_address);
  // @@protoc_insertion_point(field_set_allocated:Transfer.src_address)
}

// string dst_address = 3;
inline void Transfer::clear_dst_address() {
  dst_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::dst_address() const {
  // @@protoc_insertion_point(field_get:Transfer.dst_address)
  return dst_address_.GetNoArena();
}
inline void Transfer::set_dst_address(const ::std::string& value) {
  
  dst_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.dst_address)
}
#if LANG_CXX11
inline void Transfer::set_dst_address(::std::string&& value) {
  
  dst_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.dst_address)
}
#endif
inline void Transfer::set_dst_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dst_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.dst_address)
}
inline void Transfer::set_dst_address(const char* value, size_t size) {
  
  dst_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.dst_address)
}
inline ::std::string* Transfer::mutable_dst_address() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.dst_address)
  return dst_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_dst_address() {
  // @@protoc_insertion_point(field_release:Transfer.dst_address)
  
  return dst_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_dst_address(::std::string* dst_address) {
  if (dst_address != NULL) {
    
  } else {
    
  }
  dst_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_address);
  // @@protoc_insertion_point(field_set_allocated:Transfer.dst_address)
}

// string order = 4;
inline void Transfer::clear_order() {
  order_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::order() const {
  // @@protoc_insertion_point(field_get:Transfer.order)
  return order_.GetNoArena();
}
inline void Transfer::set_order(const ::std::string& value) {
  
  order_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.order)
}
#if LANG_CXX11
inline void Transfer::set_order(::std::string&& value) {
  
  order_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.order)
}
#endif
inline void Transfer::set_order(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  order_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.order)
}
inline void Transfer::set_order(const char* value, size_t size) {
  
  order_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.order)
}
inline ::std::string* Transfer::mutable_order() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.order)
  return order_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_order() {
  // @@protoc_insertion_point(field_release:Transfer.order)
  
  return order_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_order(::std::string* order) {
  if (order != NULL) {
    
  } else {
    
  }
  order_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), order);
  // @@protoc_insertion_point(field_set_allocated:Transfer.order)
}

// string amount = 5;
inline void Transfer::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::amount() const {
  // @@protoc_insertion_point(field_get:Transfer.amount)
  return amount_.GetNoArena();
}
inline void Transfer::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.amount)
}
#if LANG_CXX11
inline void Transfer::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.amount)
}
#endif
inline void Transfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.amount)
}
inline void Transfer::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.amount)
}
inline ::std::string* Transfer::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:Transfer.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:Transfer.amount)
}

// string tx = 6;
inline void Transfer::clear_tx() {
  tx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::tx() const {
  // @@protoc_insertion_point(field_get:Transfer.tx)
  return tx_.GetNoArena();
}
inline void Transfer::set_tx(const ::std::string& value) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.tx)
}
#if LANG_CXX11
inline void Transfer::set_tx(::std::string&& value) {
  
  tx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.tx)
}
#endif
inline void Transfer::set_tx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.tx)
}
inline void Transfer::set_tx(const char* value, size_t size) {
  
  tx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.tx)
}
inline ::std::string* Transfer::mutable_tx() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.tx)
  return tx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_tx() {
  // @@protoc_insertion_point(field_release:Transfer.tx)
  
  return tx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_tx(::std::string* tx) {
  if (tx != NULL) {
    
  } else {
    
  }
  tx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx);
  // @@protoc_insertion_point(field_set_allocated:Transfer.tx)
}

// string block = 7;
inline void Transfer::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::block() const {
  // @@protoc_insertion_point(field_get:Transfer.block)
  return block_.GetNoArena();
}
inline void Transfer::set_block(const ::std::string& value) {
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.block)
}
#if LANG_CXX11
inline void Transfer::set_block(::std::string&& value) {
  
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.block)
}
#endif
inline void Transfer::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.block)
}
inline void Transfer::set_block(const char* value, size_t size) {
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.block)
}
inline ::std::string* Transfer::mutable_block() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_block() {
  // @@protoc_insertion_point(field_release:Transfer.block)
  
  return block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    
  } else {
    
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:Transfer.block)
}

// bool processed = 8;
inline void Transfer::clear_processed() {
  processed_ = false;
}
inline bool Transfer::processed() const {
  // @@protoc_insertion_point(field_get:Transfer.processed)
  return processed_;
}
inline void Transfer::set_processed(bool value) {
  
  processed_ = value;
  // @@protoc_insertion_point(field_set:Transfer.processed)
}

// string sighash = 9;
inline void Transfer::clear_sighash() {
  sighash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Transfer::sighash() const {
  // @@protoc_insertion_point(field_get:Transfer.sighash)
  return sighash_.GetNoArena();
}
inline void Transfer::set_sighash(const ::std::string& value) {
  
  sighash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Transfer.sighash)
}
#if LANG_CXX11
inline void Transfer::set_sighash(::std::string&& value) {
  
  sighash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Transfer.sighash)
}
#endif
inline void Transfer::set_sighash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sighash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Transfer.sighash)
}
inline void Transfer::set_sighash(const char* value, size_t size) {
  
  sighash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Transfer.sighash)
}
inline ::std::string* Transfer::mutable_sighash() {
  
  // @@protoc_insertion_point(field_mutable:Transfer.sighash)
  return sighash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Transfer::release_sighash() {
  // @@protoc_insertion_point(field_release:Transfer.sighash)
  
  return sighash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_sighash(::std::string* sighash) {
  if (sighash != NULL) {
    
  } else {
    
  }
  sighash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sighash);
  // @@protoc_insertion_point(field_set_allocated:Transfer.sighash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Transfer_2eproto__INCLUDED
