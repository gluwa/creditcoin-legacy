// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AskOrder.proto

#ifndef PROTOBUF_AskOrder_2eproto__INCLUDED
#define PROTOBUF_AskOrder_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_AskOrder_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAskOrderImpl();
void InitDefaultsAskOrder();
inline void InitDefaults() {
  InitDefaultsAskOrder();
}
}  // namespace protobuf_AskOrder_2eproto
class AskOrder;
class AskOrderDefaultTypeInternal;
extern AskOrderDefaultTypeInternal _AskOrder_default_instance_;

// ===================================================================

class AskOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AskOrder) */ {
 public:
  AskOrder();
  virtual ~AskOrder();

  AskOrder(const AskOrder& from);

  inline AskOrder& operator=(const AskOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AskOrder(AskOrder&& from) noexcept
    : AskOrder() {
    *this = ::std::move(from);
  }

  inline AskOrder& operator=(AskOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AskOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AskOrder* internal_default_instance() {
    return reinterpret_cast<const AskOrder*>(
               &_AskOrder_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AskOrder* other);
  friend void swap(AskOrder& a, AskOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AskOrder* New() const PROTOBUF_FINAL { return New(NULL); }

  AskOrder* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AskOrder& from);
  void MergeFrom(const AskOrder& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AskOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string blockchain = 1;
  void clear_blockchain();
  static const int kBlockchainFieldNumber = 1;
  const ::std::string& blockchain() const;
  void set_blockchain(const ::std::string& value);
  #if LANG_CXX11
  void set_blockchain(::std::string&& value);
  #endif
  void set_blockchain(const char* value);
  void set_blockchain(const char* value, size_t size);
  ::std::string* mutable_blockchain();
  ::std::string* release_blockchain();
  void set_allocated_blockchain(::std::string* blockchain);

  // string address = 2;
  void clear_address();
  static const int kAddressFieldNumber = 2;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const char* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // string amount = 3;
  void clear_amount();
  static const int kAmountFieldNumber = 3;
  const ::std::string& amount() const;
  void set_amount(const ::std::string& value);
  #if LANG_CXX11
  void set_amount(::std::string&& value);
  #endif
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  ::std::string* mutable_amount();
  ::std::string* release_amount();
  void set_allocated_amount(::std::string* amount);

  // string interest = 4;
  void clear_interest();
  static const int kInterestFieldNumber = 4;
  const ::std::string& interest() const;
  void set_interest(const ::std::string& value);
  #if LANG_CXX11
  void set_interest(::std::string&& value);
  #endif
  void set_interest(const char* value);
  void set_interest(const char* value, size_t size);
  ::std::string* mutable_interest();
  ::std::string* release_interest();
  void set_allocated_interest(::std::string* interest);

  // string maturity = 5;
  void clear_maturity();
  static const int kMaturityFieldNumber = 5;
  const ::std::string& maturity() const;
  void set_maturity(const ::std::string& value);
  #if LANG_CXX11
  void set_maturity(::std::string&& value);
  #endif
  void set_maturity(const char* value);
  void set_maturity(const char* value, size_t size);
  ::std::string* mutable_maturity();
  ::std::string* release_maturity();
  void set_allocated_maturity(::std::string* maturity);

  // string fee = 6;
  void clear_fee();
  static const int kFeeFieldNumber = 6;
  const ::std::string& fee() const;
  void set_fee(const ::std::string& value);
  #if LANG_CXX11
  void set_fee(::std::string&& value);
  #endif
  void set_fee(const char* value);
  void set_fee(const char* value, size_t size);
  ::std::string* mutable_fee();
  ::std::string* release_fee();
  void set_allocated_fee(::std::string* fee);

  // string block = 8;
  void clear_block();
  static const int kBlockFieldNumber = 8;
  const ::std::string& block() const;
  void set_block(const ::std::string& value);
  #if LANG_CXX11
  void set_block(::std::string&& value);
  #endif
  void set_block(const char* value);
  void set_block(const char* value, size_t size);
  ::std::string* mutable_block();
  ::std::string* release_block();
  void set_allocated_block(::std::string* block);

  // string sighash = 9;
  void clear_sighash();
  static const int kSighashFieldNumber = 9;
  const ::std::string& sighash() const;
  void set_sighash(const ::std::string& value);
  #if LANG_CXX11
  void set_sighash(::std::string&& value);
  #endif
  void set_sighash(const char* value);
  void set_sighash(const char* value, size_t size);
  ::std::string* mutable_sighash();
  ::std::string* release_sighash();
  void set_allocated_sighash(::std::string* sighash);

  // uint64 expiration = 7;
  void clear_expiration();
  static const int kExpirationFieldNumber = 7;
  ::google::protobuf::uint64 expiration() const;
  void set_expiration(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AskOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr blockchain_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr amount_;
  ::google::protobuf::internal::ArenaStringPtr interest_;
  ::google::protobuf::internal::ArenaStringPtr maturity_;
  ::google::protobuf::internal::ArenaStringPtr fee_;
  ::google::protobuf::internal::ArenaStringPtr block_;
  ::google::protobuf::internal::ArenaStringPtr sighash_;
  ::google::protobuf::uint64 expiration_;
  mutable int _cached_size_;
  friend struct ::protobuf_AskOrder_2eproto::TableStruct;
  friend void ::protobuf_AskOrder_2eproto::InitDefaultsAskOrderImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AskOrder

// string blockchain = 1;
inline void AskOrder::clear_blockchain() {
  blockchain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::blockchain() const {
  // @@protoc_insertion_point(field_get:AskOrder.blockchain)
  return blockchain_.GetNoArena();
}
inline void AskOrder::set_blockchain(const ::std::string& value) {
  
  blockchain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.blockchain)
}
#if LANG_CXX11
inline void AskOrder::set_blockchain(::std::string&& value) {
  
  blockchain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.blockchain)
}
#endif
inline void AskOrder::set_blockchain(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  blockchain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.blockchain)
}
inline void AskOrder::set_blockchain(const char* value, size_t size) {
  
  blockchain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.blockchain)
}
inline ::std::string* AskOrder::mutable_blockchain() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.blockchain)
  return blockchain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_blockchain() {
  // @@protoc_insertion_point(field_release:AskOrder.blockchain)
  
  return blockchain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_blockchain(::std::string* blockchain) {
  if (blockchain != NULL) {
    
  } else {
    
  }
  blockchain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), blockchain);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.blockchain)
}

// string address = 2;
inline void AskOrder::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::address() const {
  // @@protoc_insertion_point(field_get:AskOrder.address)
  return address_.GetNoArena();
}
inline void AskOrder::set_address(const ::std::string& value) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.address)
}
#if LANG_CXX11
inline void AskOrder::set_address(::std::string&& value) {
  
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.address)
}
#endif
inline void AskOrder::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.address)
}
inline void AskOrder::set_address(const char* value, size_t size) {
  
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.address)
}
inline ::std::string* AskOrder::mutable_address() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_address() {
  // @@protoc_insertion_point(field_release:AskOrder.address)
  
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    
  } else {
    
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.address)
}

// string amount = 3;
inline void AskOrder::clear_amount() {
  amount_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::amount() const {
  // @@protoc_insertion_point(field_get:AskOrder.amount)
  return amount_.GetNoArena();
}
inline void AskOrder::set_amount(const ::std::string& value) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.amount)
}
#if LANG_CXX11
inline void AskOrder::set_amount(::std::string&& value) {
  
  amount_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.amount)
}
#endif
inline void AskOrder::set_amount(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.amount)
}
inline void AskOrder::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.amount)
}
inline ::std::string* AskOrder::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.amount)
  return amount_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_amount() {
  // @@protoc_insertion_point(field_release:AskOrder.amount)
  
  return amount_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_amount(::std::string* amount) {
  if (amount != NULL) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.amount)
}

// string interest = 4;
inline void AskOrder::clear_interest() {
  interest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::interest() const {
  // @@protoc_insertion_point(field_get:AskOrder.interest)
  return interest_.GetNoArena();
}
inline void AskOrder::set_interest(const ::std::string& value) {
  
  interest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.interest)
}
#if LANG_CXX11
inline void AskOrder::set_interest(::std::string&& value) {
  
  interest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.interest)
}
#endif
inline void AskOrder::set_interest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.interest)
}
inline void AskOrder::set_interest(const char* value, size_t size) {
  
  interest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.interest)
}
inline ::std::string* AskOrder::mutable_interest() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.interest)
  return interest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_interest() {
  // @@protoc_insertion_point(field_release:AskOrder.interest)
  
  return interest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_interest(::std::string* interest) {
  if (interest != NULL) {
    
  } else {
    
  }
  interest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interest);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.interest)
}

// string maturity = 5;
inline void AskOrder::clear_maturity() {
  maturity_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::maturity() const {
  // @@protoc_insertion_point(field_get:AskOrder.maturity)
  return maturity_.GetNoArena();
}
inline void AskOrder::set_maturity(const ::std::string& value) {
  
  maturity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.maturity)
}
#if LANG_CXX11
inline void AskOrder::set_maturity(::std::string&& value) {
  
  maturity_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.maturity)
}
#endif
inline void AskOrder::set_maturity(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  maturity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.maturity)
}
inline void AskOrder::set_maturity(const char* value, size_t size) {
  
  maturity_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.maturity)
}
inline ::std::string* AskOrder::mutable_maturity() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.maturity)
  return maturity_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_maturity() {
  // @@protoc_insertion_point(field_release:AskOrder.maturity)
  
  return maturity_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_maturity(::std::string* maturity) {
  if (maturity != NULL) {
    
  } else {
    
  }
  maturity_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), maturity);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.maturity)
}

// string fee = 6;
inline void AskOrder::clear_fee() {
  fee_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::fee() const {
  // @@protoc_insertion_point(field_get:AskOrder.fee)
  return fee_.GetNoArena();
}
inline void AskOrder::set_fee(const ::std::string& value) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.fee)
}
#if LANG_CXX11
inline void AskOrder::set_fee(::std::string&& value) {
  
  fee_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.fee)
}
#endif
inline void AskOrder::set_fee(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.fee)
}
inline void AskOrder::set_fee(const char* value, size_t size) {
  
  fee_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.fee)
}
inline ::std::string* AskOrder::mutable_fee() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.fee)
  return fee_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_fee() {
  // @@protoc_insertion_point(field_release:AskOrder.fee)
  
  return fee_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_fee(::std::string* fee) {
  if (fee != NULL) {
    
  } else {
    
  }
  fee_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fee);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.fee)
}

// uint64 expiration = 7;
inline void AskOrder::clear_expiration() {
  expiration_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AskOrder::expiration() const {
  // @@protoc_insertion_point(field_get:AskOrder.expiration)
  return expiration_;
}
inline void AskOrder::set_expiration(::google::protobuf::uint64 value) {
  
  expiration_ = value;
  // @@protoc_insertion_point(field_set:AskOrder.expiration)
}

// string block = 8;
inline void AskOrder::clear_block() {
  block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::block() const {
  // @@protoc_insertion_point(field_get:AskOrder.block)
  return block_.GetNoArena();
}
inline void AskOrder::set_block(const ::std::string& value) {
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.block)
}
#if LANG_CXX11
inline void AskOrder::set_block(::std::string&& value) {
  
  block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.block)
}
#endif
inline void AskOrder::set_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.block)
}
inline void AskOrder::set_block(const char* value, size_t size) {
  
  block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.block)
}
inline ::std::string* AskOrder::mutable_block() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.block)
  return block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_block() {
  // @@protoc_insertion_point(field_release:AskOrder.block)
  
  return block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_block(::std::string* block) {
  if (block != NULL) {
    
  } else {
    
  }
  block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), block);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.block)
}

// string sighash = 9;
inline void AskOrder::clear_sighash() {
  sighash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AskOrder::sighash() const {
  // @@protoc_insertion_point(field_get:AskOrder.sighash)
  return sighash_.GetNoArena();
}
inline void AskOrder::set_sighash(const ::std::string& value) {
  
  sighash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AskOrder.sighash)
}
#if LANG_CXX11
inline void AskOrder::set_sighash(::std::string&& value) {
  
  sighash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AskOrder.sighash)
}
#endif
inline void AskOrder::set_sighash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sighash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AskOrder.sighash)
}
inline void AskOrder::set_sighash(const char* value, size_t size) {
  
  sighash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AskOrder.sighash)
}
inline ::std::string* AskOrder::mutable_sighash() {
  
  // @@protoc_insertion_point(field_mutable:AskOrder.sighash)
  return sighash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AskOrder::release_sighash() {
  // @@protoc_insertion_point(field_release:AskOrder.sighash)
  
  return sighash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AskOrder::set_allocated_sighash(::std::string* sighash) {
  if (sighash != NULL) {
    
  } else {
    
  }
  sighash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sighash);
  // @@protoc_insertion_point(field_set_allocated:AskOrder.sighash)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AskOrder_2eproto__INCLUDED
